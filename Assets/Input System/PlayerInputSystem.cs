//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input System/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""Player Input"",
            ""id"": ""b7919d11-331a-406f-9735-3915d6e0a418"",
            ""actions"": [
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""35243922-e32f-44ee-9cd4-716d5264a25f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.01,pressPoint=0.05)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Finger Positon"",
                    ""type"": ""Value"",
                    ""id"": ""3664d5c4-e4ee-461a-b4a5-33b652e4c252"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary Finger Positon"",
                    ""type"": ""Value"",
                    ""id"": ""e3602ff6-fbce-4a3b-ad23-15de3c4ce659"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecodaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""5f429b72-7b3f-4cbb-982b-28467860d2c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""dcb5dd5d-660b-442a-82d1-17809e285dc6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""688909ca-a3cf-4227-b2aa-40aed233ff19"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b15b05f2-c9d8-4834-9ec1-034314ade3d4"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3a66875-019b-4640-b77e-b6ecaded4ed8"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Finger Positon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3072908-6c2f-4a5a-a505-3b0fbce1739e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Finger Positon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""826ac0e2-588a-4f57-aab5-e782cf6150c3"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Finger Positon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a10892cf-5871-4f20-b5f8-32aa995bfb1c"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecodaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31f0e0a7-0ea3-4838-b52d-612be77084bc"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Input
        m_PlayerInput = asset.FindActionMap("Player Input", throwIfNotFound: true);
        m_PlayerInput_Hold = m_PlayerInput.FindAction("Hold", throwIfNotFound: true);
        m_PlayerInput_PrimaryFingerPositon = m_PlayerInput.FindAction("Primary Finger Positon", throwIfNotFound: true);
        m_PlayerInput_SecondaryFingerPositon = m_PlayerInput.FindAction("Secondary Finger Positon", throwIfNotFound: true);
        m_PlayerInput_SecodaryTouchContact = m_PlayerInput.FindAction("SecodaryTouchContact", throwIfNotFound: true);
        m_PlayerInput_Scroll = m_PlayerInput.FindAction("Scroll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Input
    private readonly InputActionMap m_PlayerInput;
    private List<IPlayerInputActions> m_PlayerInputActionsCallbackInterfaces = new List<IPlayerInputActions>();
    private readonly InputAction m_PlayerInput_Hold;
    private readonly InputAction m_PlayerInput_PrimaryFingerPositon;
    private readonly InputAction m_PlayerInput_SecondaryFingerPositon;
    private readonly InputAction m_PlayerInput_SecodaryTouchContact;
    private readonly InputAction m_PlayerInput_Scroll;
    public struct PlayerInputActions
    {
        private @PlayerInputSystem m_Wrapper;
        public PlayerInputActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hold => m_Wrapper.m_PlayerInput_Hold;
        public InputAction @PrimaryFingerPositon => m_Wrapper.m_PlayerInput_PrimaryFingerPositon;
        public InputAction @SecondaryFingerPositon => m_Wrapper.m_PlayerInput_SecondaryFingerPositon;
        public InputAction @SecodaryTouchContact => m_Wrapper.m_PlayerInput_SecodaryTouchContact;
        public InputAction @Scroll => m_Wrapper.m_PlayerInput_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Add(instance);
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @PrimaryFingerPositon.started += instance.OnPrimaryFingerPositon;
            @PrimaryFingerPositon.performed += instance.OnPrimaryFingerPositon;
            @PrimaryFingerPositon.canceled += instance.OnPrimaryFingerPositon;
            @SecondaryFingerPositon.started += instance.OnSecondaryFingerPositon;
            @SecondaryFingerPositon.performed += instance.OnSecondaryFingerPositon;
            @SecondaryFingerPositon.canceled += instance.OnSecondaryFingerPositon;
            @SecodaryTouchContact.started += instance.OnSecodaryTouchContact;
            @SecodaryTouchContact.performed += instance.OnSecodaryTouchContact;
            @SecodaryTouchContact.canceled += instance.OnSecodaryTouchContact;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(IPlayerInputActions instance)
        {
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @PrimaryFingerPositon.started -= instance.OnPrimaryFingerPositon;
            @PrimaryFingerPositon.performed -= instance.OnPrimaryFingerPositon;
            @PrimaryFingerPositon.canceled -= instance.OnPrimaryFingerPositon;
            @SecondaryFingerPositon.started -= instance.OnSecondaryFingerPositon;
            @SecondaryFingerPositon.performed -= instance.OnSecondaryFingerPositon;
            @SecondaryFingerPositon.canceled -= instance.OnSecondaryFingerPositon;
            @SecodaryTouchContact.started -= instance.OnSecodaryTouchContact;
            @SecodaryTouchContact.performed -= instance.OnSecodaryTouchContact;
            @SecodaryTouchContact.canceled -= instance.OnSecodaryTouchContact;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IPlayerInputActions
    {
        void OnHold(InputAction.CallbackContext context);
        void OnPrimaryFingerPositon(InputAction.CallbackContext context);
        void OnSecondaryFingerPositon(InputAction.CallbackContext context);
        void OnSecodaryTouchContact(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
}
